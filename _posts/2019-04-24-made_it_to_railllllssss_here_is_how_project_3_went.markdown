---
layout: post
title:      "Made it To RAILLLLLSSSS! Here is How Project 3 Went..."
date:       2019-04-24 21:17:33 +0000
permalink:  made_it_to_railllllssss_here_is_how_project_3_went
---


Fantasy Basketball Rails Project 

I am an avid fan of all fantasy sports. I do have a huge passion for Football, but that league ends in December. Luckily for me, I also love basketball and that league starts at the end of October. Again, people will say I spend way too much time on fantasy sports, but it is a passion of mine. For this project, I wanted to continue building on what I learned in the Sinatra section so I decided to build a site where users could create an account and create/read, update, edit, and destroy players on a table, but also now be able to join multiple teams, leagues and even be able to create new leagues if the user has admin privileges. The concept is rather simple, but I am continuing to add functionality to concepts started back in the CLI project. Similar to the Sinatra project, the core items I build out are a database, models, controllers, and views. There were some ups and downs but for the main part this project was very fun to build out. 

I. DB Migration 
I created five tables that I migrated into a SQL database: leagues, player_leagues, players, teams, and users. The leagues table contains just the name field. The players table contains the following fields: name, position, nba_team, points, and team_id (for the user’s team). The next table is a join table: player_leagues. It contains both the league_id and the player_id, but also contains a user input: utility. For those who don’t know about fantasy basketball, typically, a user is able to have three utility spots on his or her roster. The significance of this is that normally, there are set positions on a roster that a user must fill: point guard, shooting guard, small forward, power forward, and center. Usually, a user will get 2 spots for each position. However, a user will also have three utility spots, which are just three extra spots for a user to fill, regardless of the player’s position. The next table to highlight is the teams table. The table includes name, total_points, user_id, and league_id. Note, I actually have yet to incorporate this functionality, but the goal with adding total_points was to calculate how many points a team is projected to accumulate based on who the user added to his or her team. The last table is the users table, that has name, password_digest, email, admin, and various fields for Omniauth. Note, I originally had both github and google as my two Omniauth providers. I actually took at the Google but will add it back in when I refine this project. 

II. Models 
The project has five models. The biggest objective for the models was to create that link between the leagues and players. The goal here was for every league to be able to have access to all the players. If a player was selected by a team in that league, the player is obviously unavailable. However, the tricky part was making sure the player was listed as available in another league. Therefore, I accomplished this with my player_league model. If you look over in the league model, I have the leagues belonging to a player, a league having many player_leagues, teams, players(through player_leagues), and users (through teams).  Then on the player model side, I had the player belong to a team, but have both many player_leagues and leagues (through player_league), so that when a player is added to a team, I can update it so that the player belongs to that specific ID, but also create that join table between the player and the league through player_leagues. I also added in various validations throughout many of the models and even incorporated some scopes! If you look at the Player model, I added in two scopes. One is used to help validate the uniqueness of a name for each team_id. This checks to make sure a user is not able to add a player with the same name on his or her team. Second, I added in a scope to sort the players by points. When one gets to the add player view of the site, the players are organized in descending order by points. I thought this was a pretty cool feature. I also have a self.search method within the model that I am still playing around with, which will allow for a user to actually search for a player when trying to add a player to a team. 

The buildout of the models was pretty seamless. I found learning about the various validations and scopes to be interesting and I am thrilled that I was able to use them in this project!  The real struggle here again, was just figuring out how to solve the issue I posed above, which is how can I add a player to a team in one league, but still have him available in other leagues. 
	
III. Controllers 
I built out 7 controllers: applications, players, users, leagues, omniauth, sessions, and teams. The application controller inherits from Sinatra and basically sets the stage for the other controllers. It holds 3 helpers but also links out to 3 helper pages: sessions, players and leagues helper. I use them throughout the project. The 3 helpers on the application controller are similar to the ones used in the Sinatra project: logged_in, require_login, and admin_only. The most interesting controller build out was the omniauth controller. For me, this was the most difficult part of the assignment. I spent some time researching how to incorporate Omniauth into my project and best practices. I decided to create a single controller that handles a user logging in via Omniauth. There are only three methods in the controller: a create method, omni? and a private from_omniauth method. The omni method simply checks to see if the user is coming in from an omniauth login. The second private method takes the information and finds the user if he/she exists OR if the user is new, creates a new account for the user view a .first_or_initialize.tap method. I found this method to be very interesting and I am so happy I was able to use it in this project. Lastly, the public method, create, setst the session user_id to the current user and logs the user in to the app. 

Again, the real struggle with this project was finding the cleanest way to set up Omniauth. I am happy with how the project turned out. 

IV. Views 
I structured this app with six folders. The folders include a layouts, leagues, players, sessions, teams, and users view folder. The most complicated view page to build out was the players index page (screen shot below). There are a few things going on in this page. One, I created a new db method called populate. If you run it in the command line, it goes through an excel sheet that I incorporated in the files and creates player objects for each player in the sheet. Due to the descending scope method added in the player model, you will notice each player is sorted by project points. The next thing you will notice is the light gray ‘Player Not Available’ shown in the screen shot below. In the html file, I plucked the league_id from Player League to cross-check whether or not the player has been added to this particular Player_League. If not, then the player is available to be added as a normal or utility player. This was definitely a challenging part of the project and I am glad that it all worked out. As mentioned earlier in the blog, I also added in the ability to search for player name, but have not completely solved the issue. This is something I would like to tackle at some point in the future when revisiting the project. 


V. Overall 
Overall, I found this project to be a lot of fun. As you can see, I am passionate about both coding and fantasy sports. Any project that combines both of these interests is a win for me. Again, I found the section highlighted in the views portion to be the most challenging part of the assignment as well as getting Omniauth to work. I originally had Google working but it recently broke, but I was able to get Github to work and I am pleased with the results. For my future iteration, I would like to have Github, Google and Facebook as options. I would also love to style the page to give it more of a professional feel. 

Thank you for reading this! 

