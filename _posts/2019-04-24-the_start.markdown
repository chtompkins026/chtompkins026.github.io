---
layout: post
title:      "The Start ... "
date:       2019-04-24 18:27:48 +0000
permalink:  the_start
---


I am an avid fan of Fantasy Football. My parents and some of my friends would argue I am too big of a fan sometimes. In my opinion, there is no such thing! 

For this project, I wanted to blend two of my passions: coding and fantasy football. I decided to attempt to scrape data from Fantasy Pro’s website and create a CLI where users could see overall rankings and player stats, but also have a custom component where one could look specifically at his/her team and get statistics for each player. There are two parts to the project. For one, I wanted a user to be able to interact with the CLI and be able to see the latest weekly rankings by position. Then, if there was a certain player within the rankings the user was interested in, the CLI would be able to accept a name, and drill down to show the player’s description, fantasy expert note, and projected score. Second, I wanted to give the user a custom experience, by allowing the user to able to import a team and get specific stats for each player on the team. To do this, I built a quick HTML page that contains all the players on my current fantasy roster. I then connected to this page, so that the user could import a team and be able to read all the notes and projected stats for each player. Even more exciting, I wanted to add in a total score for the team, so the user could see what the team was projected to score for the week. The second part is really where the Object Oriented Programming comes into play, as there are two classes that really work together to create and store Player objects the user can call on later in the CLI. The project was a fantastic learning experience. It really was a nice mix of testing my ability to scrape data via Nokogiri, connect classes together and speak to one another via Object Oriented Programming, but mostly practice my skills of building out functional methods with the least code possible. 

I. Part One - Looking up traditional positions

I first tackled the CLI class and Scraper class. In the CLI, I wanted the user to be able to select a position, which would then pull down the weekly player ranking for the selected position. In order to accomplish this, I built a class variable called Positions that stores each position I would want the user to be able to look up. After some trial and error on the best possible way to start the CLI, I implemented code within the bin file that initializes the CLI and calls a ‘call’ method. The ‘call’ method then greets the user and runs a continuous loop until the user exits out of the program. The first part of the loop allows the user to select a position. The loop iterates through the Player array variable mentioned above. I wanted to organize it this way so that if a developer wanted to add in a new position to look up, instead of going through each method, the developer would just simply add the position in the array and this would NOT impact any of the other methods. I played around with various ways to accomplish this, but think I created a dynamic/ DRY way of doing this without hard coding any numbers. Another aspect of the select position method that I am excited about is that I was able to implement a rescue/exception part to the code so that if a user accidentally types in a number not on the menu or even just a random key, the CLI will prompt the user to retry adding in another player’s name. This was something that we covered in the Ruby section of the program and something I wanted to implement in my code. I saw this as the perfect opportunity to enhance the user experience of my CLI while praticing some of the learnings from the course. 

Next, I moved on to when the user selects a position. On the backend, once a user selects a position, a link is created using that position. When I started my initial research inspecting the Fantasypros site, I noticed that the links on Fantasypros are relatively the same. The only difference between each position is literally just the position at the end of the URL. So the last part of the select position method is that it takes the user selection and adds it to a link from Fantasypros to create a full link instance variable. This link variable is then passed in the second part of the loop, which then calls the Scraper class to start the player ranking method. 

The code then initiates the first method of the Scraper class, the player_ranker class method, which scrapes the rankings of every player of the position the user selected along with each players position, official rank, team name, and opponent for the week and stores this data in a class variable called ALL which is just an empty array. The process of scraping from the Fantasypros site was somewhat difficult since there were a ton of various element and ids, however after some testing with byebug, I was finally able to pinpoint the exact tags I needed to add into my scraper methods in order to pull and store the information I needed. The second class method I added that is called directly after the player_ranker is the show_all method, which runs through the data stored in the class array mentioned above, and displays the rankings nicely for the user. I played around with various display formats, but found the current iteration to be the cleanest way of showing the rankings. 

Next, in order to get the CLI to prompt the user to "Pick a name to get a description: ".  I put together another class method in the scraper class called player_description. Back in the CLI class, once the player_ranker runs, the next part of the loop calls the Scraper player_description class method. In this method, I used Nokogiri to scrape data from a different page. Similar to the way I created the link mentioned above to pull down rankings, to manipulate a link to search and append the players name to a hard coded Fantasypros link so that it would pull data from a specific player’s page. I played around with what exactly I wanted to pull down, but decided that the key pieces of information I wanted to scrape here were the fantasy pro expert analysis for a specific player, as well as: Player Name, Official Ranking, Projected Points for the Week, Player’s Opponent, and Matchup Time. 

The last piece of functionality I wanted to add to CLI was to implement a way for the user to continue with the program or terminate the program. I added this as the last step of the loop run in the CLI class; I called the method check out. Here, I set up the method to ask the user if he/she would like to continue. The user then has the option of looking up more players and rankings, or can simply exit out of the program. 

Overall, the first part of my program runs through the CLI and Scraper class. What seemed to be the most challenging part of this section was just going through the HTML and CSS of the Fantasypros site in order to find the ids I needed in order to pull down specific information. Specifically, I found gathering the RB ranking and projected points in the player_description class method (Scraper class) to be the most difficult, since the ID contains a 24 different pieces of information. In order to get just these two pieces of data, I used byebug to iterate through the array and find the two indexes that held these two pieces of information. It was really exciting when I was able to pull this data and add it to the player class using a class method I build called ranker! Overall, I thought part 1 really tested my abilities to scrape data and have different methods communicate with one another. 

II. Part Two - Importing your actual Fantasy Football Team & Getting Custom Stats for Each Player

In the second part of my CLI project, I wanted to build out some components to the program that would test my Object Oriented Programming abilities. In order to accomplish this, I built out two more classes: Team Class and Player class. When a user first runs bin/ff_start.rb to execute the program, the last two options on the menu are 6 ‘import your team’, and 7 ‘look up player’. Option 6 is one component of my program that I am most excited about because it scrapes some of the information off of an HTML page that I created! Here, I built out a simple HTML page with some css in order to store my current fantasy football roster in a table. I then connected the table to my CLI via the Team class, where I scrape and store each players data within a class variable that lives within the Team class. Even more exciting, I then have another method within the Team class that initializes the Player class to create a Player object, which the user of the CLI can then use in option 7 to drill down on specific information for each player he/she imported into the program on option 6. 

The way I set this up was I added in class method called read_file, which runs through the table of my HTML page, and then passes through this data into my Player class to literally create Players, who can then be looked up in option 7. I wanted to add this feature in for several reasons. For one, most fantasy players have limited amount of time and want to figure out how their players are going to do each week. Therefore, via option 6, a user can quickly see all the information provided in part 1 specifically for each player on his/her team without having to sift through an entire rankings list. 

I had a lot of fun building this out as this was the first time I used HTML/CSS in quite some time. Eventually, as I progress through this course, I would love to come back to this project and get my search bar that currently exist on the page workable, so that a user could add or even delete a player from the table. Currently, if the user would like to add players to the team or remove, he/she can do this by editing the HTML in the table. For example, if a user wanted to change the QB, he/she would go down to the table body, where all the players are organized in the following way:

<tr>
  <td> Alex</td>
  <td> Smith</td>
  <td> QB</td>
</tr>

To change a player, just remove the first and last name between the <td> and add in a new player's name.

<tr>
  <td> Patrick </td>
  <td> Mahomes </td>
  <td> QB</td>
</tr>

Next hit save and then rerun option 6. This will actually import the new player added to the roster, by creating a new player object in the Player class and adding his data to the Player array in the Team class. As mentioned, the last two features are really where the power of OOP is highlighted. Option 6 runs through the roster and creates a new instance of a Player that is stored in the player class. The neat thing is, the program is set up to recognize if the player already exists! So when you rerun the import for the second time in the example above, it will just add Patrick Mahomes!




